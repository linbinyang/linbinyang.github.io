<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>https://linbinyang.github.io/</link>
    <description>Recent content on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 05 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://linbinyang.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>knapsack problem</title>
      <link>https://linbinyang.github.io/blog/knapsack/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://linbinyang.github.io/blog/knapsack/</guid>
      <description>01 Knapsack 有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。 第 i 件物品的体积是 vi，价值是 wi。 求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。输出最大价值。 To solve this problem using Dynamic Programming, there are a few things we need to clarify before we dive deep:
 Range(范围) Restriction(限制) Target(目标)  Here we first define a two-dimension array \(f[i][j]\), where \(i\) means we can randomly pick any elements from goods indexed from 0 to \(i\). \(j\) means the maximum volume of the knapsack. \(f[i][j]\) means the maximum weight value given the Range condition \(i\) and Restriction condition \(j\), so \(f[i][j]\) is our Target of which the type is maximum.</description>
    </item>
    
    <item>
      <title>EP-梦中的你-2023全国巡演杭州站</title>
      <link>https://linbinyang.github.io/blog/escapse_plan_show/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://linbinyang.github.io/blog/escapse_plan_show/</guid>
      <description></description>
    </item>
    
    <item>
      <title>How Does Mysql Index Work</title>
      <link>https://linbinyang.github.io/blog/mysql_index/</link>
      <pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://linbinyang.github.io/blog/mysql_index/</guid>
      <description>1. Start from BST(Binary Search Tree) Consider how to solve LeetCode 704: Binary Search:
Input: nums = [-1,0,3,5,9,12], target = 9 Output: 4 Explanation: 9 exists in nums and its index is 4 We use divide-and-conquer strategy and that reduces the time complexity of finding an element from O(n) to O(logn).
Here is the code:
class Solution { public: int search(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) { return helper(nums, 0, nums.size() -1, target); } int helper(vector&amp;lt;int&amp;gt;&amp;amp; nums, int low, int high, int target){ if (high &amp;lt; low) return -1; int mid = (high - low) / 2 + low; if (nums[mid] == target) return mid; else if(nums[mid] &amp;gt; target) return helper(nums, low, mid-1, target); else return helper(nums, mid + 1, high, target); } }; 2.</description>
    </item>
    
    <item>
      <title>逃跑计划 - 北纬66° [挪威极光之旅纪录片]</title>
      <link>https://linbinyang.github.io/blog/first_post/</link>
      <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://linbinyang.github.io/blog/first_post/</guid>
      <description>   </description>
    </item>
    
  </channel>
</rss>
